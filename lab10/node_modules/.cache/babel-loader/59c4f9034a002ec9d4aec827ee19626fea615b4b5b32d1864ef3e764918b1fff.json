{"ast":null,"code":"import { defaultFilters } from \"../types\";\nimport { selectVacancy, toggleVacancy, VisibilityFilters } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport VacanciesList from \"../components/VacanciesList\";\nexport const getVisibleVacancies = function (vacancies) {\n  let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VisibilityFilters.SHOW_ALL;\n  let values = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultFilters;\n  switch (filter) {\n    case VisibilityFilters.SHOW_ALL:\n      return vacancies;\n    case VisibilityFilters.SHOW_FAVORITES:\n      return vacancies.filter(t => t.isFavorite);\n    case VisibilityFilters.SHOW_FILTERS:\n      let filtered = vacancies.filter(t => t.city === values.locationFilter);\n      filtered = filtered.filter(t => t.description.schedule === values.scheduleFilter);\n      filtered = filtered.filter(t => t.description.employmentType === values.employmentTypeFilter);\n      filtered = filtered.filter(t => t.description.workingExperience === values.workingExperienceFilter);\n      filtered = filtered.filter(t => t.description.salaryFrom <= values.salaryFilter && values.salaryFilter <= t.description.salaryTo);\n      return filtered;\n    default:\n      throw new Error('Unknown filter: ' + filter);\n  }\n};\nconst mapStateToProps = state => ({\n  vacancies: getVisibleVacancies(state.vacancies, state.visibilityFilter.filter, state.visibilityFilter.filterValues)\n});\nconst mapDispatchToProps = dispatch => ({\n  toggleVacancy: id => dispatch(toggleVacancy(id)),\n  selectVacancy: id => dispatch(selectVacancy(id))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(VacanciesList);","map":{"version":3,"names":["defaultFilters","selectVacancy","toggleVacancy","VisibilityFilters","connect","VacanciesList","getVisibleVacancies","vacancies","filter","arguments","length","undefined","SHOW_ALL","values","SHOW_FAVORITES","t","isFavorite","SHOW_FILTERS","filtered","city","locationFilter","description","schedule","scheduleFilter","employmentType","employmentTypeFilter","workingExperience","workingExperienceFilter","salaryFrom","salaryFilter","salaryTo","Error","mapStateToProps","state","visibilityFilter","filterValues","mapDispatchToProps","dispatch","id"],"sources":["C:/Users/Maria/Documents/5_SEMESTER/JavaScript/ЛБ12_13/lb12-13/lab10/src/containers/VisibleVacanciesList.tsx"],"sourcesContent":["import {defaultFilters, FiltersType, func, stateType, VacancyInfo} from \"../types\";\nimport {selectVacancy, toggleVacancy, VisibilityFilters} from \"../actions\";\nimport {connect} from \"react-redux\";\nimport VacanciesList from \"../components/VacanciesList\";\nimport vacancies from \"../reducers/vacancies\";\nimport visibilityFilter from \"../reducers/visibilityFilter\";\n\nexport const getVisibleVacancies = (vacancies : VacancyInfo[], filter : string = VisibilityFilters.SHOW_ALL, values : FiltersType = defaultFilters) => {\n    switch (filter) {\n        case VisibilityFilters.SHOW_ALL:\n            return vacancies;\n        case VisibilityFilters.SHOW_FAVORITES:\n            return vacancies.filter((t) => t.isFavorite);\n        case VisibilityFilters.SHOW_FILTERS:\n            let filtered : VacancyInfo[] = vacancies.filter((t) => t.city === values.locationFilter);\n            filtered = filtered.filter((t) => t.description.schedule === values.scheduleFilter);\n            filtered = filtered.filter((t) => t.description.employmentType === values.employmentTypeFilter);\n            filtered = filtered.filter((t) => t.description.workingExperience === values.workingExperienceFilter);\n            filtered = filtered.filter((t) => t.description.salaryFrom <= values.salaryFilter && values.salaryFilter <= t.description.salaryTo);\n            return filtered;\n        default:\n            throw new Error('Unknown filter: ' + filter);\n    }\n};\nconst mapStateToProps = (state : stateType) => ({\n    vacancies : getVisibleVacancies(state.vacancies, state.visibilityFilter.filter, state.visibilityFilter.filterValues),\n});\nconst mapDispatchToProps = (dispatch : func) => ({\n    toggleVacancy : (id : number) => dispatch(toggleVacancy(id)),\n    selectVacancy : (id : number) => dispatch(selectVacancy(id)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(VacanciesList);"],"mappings":"AAAA,SAAQA,cAAc,QAAkD,UAAU;AAClF,SAAQC,aAAa,EAAEC,aAAa,EAAEC,iBAAiB,QAAO,YAAY;AAC1E,SAAQC,OAAO,QAAO,aAAa;AACnC,OAAOC,aAAa,MAAM,6BAA6B;AAIvD,OAAO,MAAMC,mBAAmB,GAAG,SAAAA,CAACC,SAAyB,EAA0F;EAAA,IAAxFC,MAAe,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGN,iBAAiB,CAACS,QAAQ;EAAA,IAAEC,MAAoB,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGT,cAAc;EAC9I,QAAQQ,MAAM;IACV,KAAKL,iBAAiB,CAACS,QAAQ;MAC3B,OAAOL,SAAS;IACpB,KAAKJ,iBAAiB,CAACW,cAAc;MACjC,OAAOP,SAAS,CAACC,MAAM,CAAEO,CAAC,IAAKA,CAAC,CAACC,UAAU,CAAC;IAChD,KAAKb,iBAAiB,CAACc,YAAY;MAC/B,IAAIC,QAAwB,GAAGX,SAAS,CAACC,MAAM,CAAEO,CAAC,IAAKA,CAAC,CAACI,IAAI,KAAKN,MAAM,CAACO,cAAc,CAAC;MACxFF,QAAQ,GAAGA,QAAQ,CAACV,MAAM,CAAEO,CAAC,IAAKA,CAAC,CAACM,WAAW,CAACC,QAAQ,KAAKT,MAAM,CAACU,cAAc,CAAC;MACnFL,QAAQ,GAAGA,QAAQ,CAACV,MAAM,CAAEO,CAAC,IAAKA,CAAC,CAACM,WAAW,CAACG,cAAc,KAAKX,MAAM,CAACY,oBAAoB,CAAC;MAC/FP,QAAQ,GAAGA,QAAQ,CAACV,MAAM,CAAEO,CAAC,IAAKA,CAAC,CAACM,WAAW,CAACK,iBAAiB,KAAKb,MAAM,CAACc,uBAAuB,CAAC;MACrGT,QAAQ,GAAGA,QAAQ,CAACV,MAAM,CAAEO,CAAC,IAAKA,CAAC,CAACM,WAAW,CAACO,UAAU,IAAIf,MAAM,CAACgB,YAAY,IAAIhB,MAAM,CAACgB,YAAY,IAAId,CAAC,CAACM,WAAW,CAACS,QAAQ,CAAC;MACnI,OAAOZ,QAAQ;IACnB;MACI,MAAM,IAAIa,KAAK,CAAC,kBAAkB,GAAGvB,MAAM,CAAC;EACpD;AACJ,CAAC;AACD,MAAMwB,eAAe,GAAIC,KAAiB,KAAM;EAC5C1B,SAAS,EAAGD,mBAAmB,CAAC2B,KAAK,CAAC1B,SAAS,EAAE0B,KAAK,CAACC,gBAAgB,CAAC1B,MAAM,EAAEyB,KAAK,CAACC,gBAAgB,CAACC,YAAY;AACvH,CAAC,CAAC;AACF,MAAMC,kBAAkB,GAAIC,QAAe,KAAM;EAC7CnC,aAAa,EAAIoC,EAAW,IAAKD,QAAQ,CAACnC,aAAa,CAACoC,EAAE,CAAC,CAAC;EAC5DrC,aAAa,EAAIqC,EAAW,IAAKD,QAAQ,CAACpC,aAAa,CAACqC,EAAE,CAAC;AAC/D,CAAC,CAAC;AAEF,eAAelC,OAAO,CAClB4B,eAAe,EACfI,kBACJ,CAAC,CAAC/B,aAAa,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}